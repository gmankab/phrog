// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "PhoshShell")]
    pub struct Shell(Object<ffi::PhoshShell, ffi::PhoshShellClass>);

    match fn {
        type_ => || ffi::phosh_shell_get_type(),
    }
}

impl Shell {
    pub fn is_docked(&self) -> bool {
        ObjectExt::property(self, "docked")
    }

    pub fn set_docked(&self, docked: bool) {
        ObjectExt::set_property(self,"docked", docked)
    }

    pub fn is_locked(&self) -> bool {
        ObjectExt::property(self, "locked")
    }

    pub fn set_locked(&self, locked: bool) {
        ObjectExt::set_property(self,"locked", locked)
    }

    #[doc(alias = "phosh_shell_get_default")]
    #[doc(alias = "get_default")]
    #[allow(clippy::should_implement_trait)]    pub fn default() -> Option<Shell> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::phosh_shell_get_default())
        }
    }

    #[doc(alias = "ready")]
    pub fn connect_ready<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn ready_trampoline<F: Fn(&Shell) + 'static>(this: *mut ffi::PhoshShell, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"ready\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(ready_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "docked")]
    pub fn connect_docked_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_docked_trampoline<F: Fn(&Shell) + 'static>(this: *mut ffi::PhoshShell, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::docked\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_docked_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "locked")]
    pub fn connect_locked_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_locked_trampoline<F: Fn(&Shell) + 'static>(this: *mut ffi::PhoshShell, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::locked\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_locked_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}
