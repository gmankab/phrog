// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "PhoshLockscreen")]
    pub struct Lockscreen(Object<ffi::PhoshLockscreen, ffi::PhoshLockscreenClass>);

    match fn {
        type_ => || ffi::phosh_lockscreen_get_type(),
    }
}

impl Lockscreen {
        pub const NONE: Option<&'static Lockscreen> = None;
    

    //#[doc(alias = "phosh_lockscreen_new")]
    //pub fn new(lockscreen_type: glib::types::Type, layer_shell: /*Unimplemented*/Option<Basic: Pointer>, wl_output: /*Unimplemented*/Option<Basic: Pointer>, calls_manager: /*Ignored*/&CallsManager) -> Lockscreen {
    //    unsafe { TODO: call ffi:phosh_lockscreen_new() }
    //}

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Lockscreen`] objects.
            ///
            /// This method returns an instance of [`LockscreenBuilder`](crate::builders::LockscreenBuilder) which can be used to create [`Lockscreen`] objects.
            pub fn builder() -> LockscreenBuilder {
                LockscreenBuilder::new()
            }
        
}

impl Default for Lockscreen {
                     fn default() -> Self {
                         glib::object::Object::new::<Self>()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Lockscreen`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct LockscreenBuilder {
            builder: glib::object::ObjectBuilder<'static, Lockscreen>,
        }

        impl LockscreenBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            //pub fn calls_manager(self, calls_manager: /*Ignored*/&CallsManager) -> Self {
                        //    Self { builder: self.builder.property("calls-manager", calls_manager), }
                        //}

    // rustdoc-stripper-ignore-next
    /// Build the [`Lockscreen`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Lockscreen {
    self.builder.build() }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Lockscreen>> Sealed for T {}
}

pub trait LockscreenExt: IsA<Lockscreen> + sealed::Sealed + 'static {
    //#[doc(alias = "phosh_lockscreen_get_page")]
    //#[doc(alias = "get_page")]
    //fn page(&self) -> /*Ignored*/LockscreenPage {
    //    unsafe { TODO: call ffi:phosh_lockscreen_get_page() }
    //}

    //#[doc(alias = "phosh_lockscreen_set_page")]
    //fn set_page(&self, page: /*Ignored*/LockscreenPage) {
    //    unsafe { TODO: call ffi:phosh_lockscreen_set_page() }
    //}

    //#[doc(alias = "calls-manager")]
    //fn calls_manager(&self) -> /*Ignored*/Option<CallsManager> {
    //    ObjectExt::property(self.as_ref(), "calls-manager")
    //}

    #[doc(alias = "lockscreen-unlock")]
    fn connect_lockscreen_unlock<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn lockscreen_unlock_trampoline<P: IsA<Lockscreen>, F: Fn(&P) + 'static>(this: *mut ffi::PhoshLockscreen, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Lockscreen::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"lockscreen-unlock\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(lockscreen_unlock_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "wakeup-output")]
    fn connect_wakeup_output<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn wakeup_output_trampoline<P: IsA<Lockscreen>, F: Fn(&P) + 'static>(this: *mut ffi::PhoshLockscreen, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Lockscreen::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"wakeup-output\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(wakeup_output_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Lockscreen>> LockscreenExt for O {}
